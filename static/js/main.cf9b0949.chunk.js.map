{"version":3,"sources":["enums.ts","consts.js","Components/Header/index.tsx","Components/Tags/index.tsx","Components/Channels/index.tsx","Components/Main/index.tsx","Components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["ETagGroup","BASE_URL","Header","useState","items","setItems","admins","useEffect","fetch","then","res","json","length","map","admin","index","Fragment","key","telegramId","href","target","rel","className","Tags","tags","activeTags","onSetActiveTags","frontendTags","backendTags","designTags","commonTags","tagItem","tag","active","indexOf","value","classnames","onClick","newValue","filter","item","displayValue","forEach","group","FRONTEND","push","BACKEND","DESIGN","COMMON","Channels","channels","channel","name","link","xmlns","viewBox","width","height","id","transform","d","points","fill","Main","setChannels","setTags","setActiveTags","every","activeTag","some","channelTag","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf9b0949.chunk.js","sourcesContent":["export enum ETagGroup {\r\n    FRONTEND = 'frontend',\r\n    BACKEND = 'backend',\r\n    COMMON = 'common',\r\n    DESIGN = 'design'\r\n}","export const BASE_URL = 'https://02677645-f38f-4296-af3f-05b6974eeec2.mock.pstmn.io/';","import React, {useEffect, useState} from 'react'\r\nimport \"./index.scss\"\r\nimport {IAdmin} from \"../../models\"\r\nimport {BASE_URL} from \"../../consts\"\r\n\r\n\r\nexport const Header: React.FC = () => {\r\n    const [items, setItems] = useState<IAdmin[]>([])\r\n    let admins = null\r\n\r\n    useEffect(() => {\r\n        fetch(`${BASE_URL}/admins`)\r\n            .then(res => res.json())\r\n            .then(setItems)\r\n    }, [])\r\n\r\n    if (items && items.length) {\r\n        admins = items.map((admin, index) => (\r\n            <React.Fragment key={admin.telegramId}>\r\n                <a\r\n                    href={`https://t.me/${admin.telegramId}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className='link-admin'\r\n                >\r\n                    {`@${admin.telegramId}`}\r\n                </a>\r\n                {index + 1 === items.length ? '' : ', '}\r\n            </React.Fragment>\r\n        ))\r\n    } else {\r\n        admins = <div>Загрузка...</div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"app-header\">\r\n            <div className=\"app-header__col-left\">\r\n                <h1>#ITYouTubersRu</h1>\r\n                <h2>Сообщество русскоязычных IT-ютуберов</h2>\r\n            </div>\r\n            <div className=\"app-header__col-right\">\r\n                По вопросам вступления обращайтесь в телеграм:<br/>\r\n                {admins}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\"\r\nimport {ITag} from \"../../models\"\r\nimport {ETagGroup} from \"../../enums\"\r\nimport \"./index.scss\"\r\nimport classnames from \"classnames\"\r\n\r\ninterface IProps {\r\n    tags: ITag[]\r\n    activeTags: ITag[]\r\n    onSetActiveTags: (tags: ITag[]) => void\r\n}\r\n\r\nexport const Tags: React.FC<IProps> = ({tags, activeTags, onSetActiveTags}) => {\r\n    const frontendTags: React.ReactNode[] = []\r\n    const backendTags: React.ReactNode[] = []\r\n    const designTags: React.ReactNode[] = []\r\n    const commonTags: React.ReactNode[] = []\r\n\r\n    const tagItem = (tag: ITag) => {\r\n        const active = activeTags.indexOf(tag) > -1\r\n        const onTagClick = () => {\r\n            if (active) {\r\n                const newValue = activeTags.filter((item) => item.value !== tag.value)\r\n                onSetActiveTags(newValue)\r\n            } else {\r\n                onSetActiveTags([...activeTags, tag])\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"tag-item\" key={tag.value}>\r\n                <button className={classnames('tag-item__button', {'tag-item__button--active': active})} onClick={onTagClick}>\r\n                    {tag.displayValue}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    tags.forEach((tag) => {\r\n        switch (tag.group) {\r\n            case ETagGroup.FRONTEND:\r\n                frontendTags.push(tagItem(tag))\r\n                break\r\n            case ETagGroup.BACKEND:\r\n                backendTags.push(tagItem(tag))\r\n                break\r\n            case ETagGroup.DESIGN:\r\n                designTags.push(tagItem(tag))\r\n                break\r\n            case ETagGroup.COMMON:\r\n                commonTags.push(tagItem(tag))\r\n                break\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"tags-list\">\r\n            <div className=\"tags-list__group\">\r\n                <div className=\"tags-list__group-title\">Frontend</div>\r\n                <div className=\"tags-list__group-content\">{frontendTags}</div>\r\n            </div>\r\n            <div className=\"tags-list__group\">\r\n                <div className=\"tags-list__group-title\">Backend</div>\r\n                <div className=\"tags-list__group-content\">{backendTags}</div>\r\n            </div>\r\n            <div className=\"tags-list__group\">\r\n                <div className=\"tags-list__group-title\">Design</div>\r\n                <div className=\"tags-list__group-content\">{designTags}</div>\r\n            </div>\r\n            <div className=\"tags-list__group\">\r\n                <div className=\"tags-list__group-title\">Common</div>\r\n                <div className=\"tags-list__group-content\">{commonTags}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {IChannel} from \"../../models\"\r\nimport \"./index.scss\"\r\n\r\ninterface IProps {\r\n    channels: IChannel[]\r\n}\r\n\r\nexport const Channels: React.FC<IProps> = ({channels}) => {\r\n    return (\r\n        <div className=\"channels-list\">\r\n            {\r\n                channels.length ? channels.map((channel) => (\r\n                    <div className=\"channels-list__item\" key={channel.name}>\r\n                        <a href={channel.link} className=\"channels-list__item-link\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 71.412065 50\" width=\"21.42\"\r\n                                 height=\"15\">\r\n                                <g id=\"g5\" transform=\"scale(0.58823529,0.58823529)\">\r\n                                    <path\r\n                                        d=\"M 118.9,13.3 C 117.5,8.1 113.4,4 108.2,2.6 98.7,0 60.7,0 60.7,0 60.7,0 22.7,0 13.2,2.5 8.1,3.9 3.9,8.1 2.5,13.3 0,22.8 0,42.5 0,42.5 0,42.5 0,62.3 2.5,71.7 3.9,76.9 8,81 13.2,82.4 22.8,85 60.7,85 60.7,85 c 0,0 38,0 47.5,-2.5 5.2,-1.4 9.3,-5.5 10.7,-10.7 2.5,-9.5 2.5,-29.2 2.5,-29.2 0,0 0.1,-19.8 -2.5,-29.3 z\"/>\r\n                                    <polygon points=\"80.2,42.5 48.6,24.3 48.6,60.7\" fill=\"#ffffff\"/>\r\n                                </g>\r\n                            </svg>\r\n                            {channel.name}\r\n                        </a>\r\n                    </div>\r\n                )) : (\r\n                    <div className=\"channels-list--empty\">\r\n                        Данные отсутствуют.\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport './index.scss'\r\nimport {Tags} from \"../Tags\"\r\nimport {Channels} from \"../Channels\"\r\nimport {ITag, IChannel} from \"../../models\"\r\nimport {BASE_URL} from \"../../consts\"\r\n\r\nexport const Main: React.FC = () => {\r\n    const [channels, setChannels] = useState<IChannel[]>([])\r\n    const [tags, setTags] = useState<ITag[]>([])\r\n    const [activeTags, setActiveTags] = useState<ITag[]>([])\r\n\r\n    useEffect(() => {\r\n        fetch(`${BASE_URL}/channels`)\r\n            .then(res => res.json())\r\n            .then(setChannels)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetch(`${BASE_URL}/tags`)\r\n            .then(res => res.json())\r\n            .then(setTags)\r\n    }, [])\r\n\r\n    const filteredData = () => {\r\n        return channels.filter(channel => {\r\n            return activeTags.every(activeTag => {\r\n                return channel.tags.some(channelTag => {\r\n                    return (\r\n                        activeTag.value === channelTag.value &&\r\n                        activeTag.group === channelTag.group\r\n                    )\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Tags\r\n                tags={tags}\r\n                activeTags={activeTags}\r\n                onSetActiveTags={setActiveTags}\r\n            />\r\n            <Channels channels={activeTags.length ? filteredData() : channels}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './index.scss'\r\nimport {Header} from \"../Header\"\r\nimport {Main} from \"../Main\"\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <Main />\r\n    </div>\r\n  )\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Index is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}